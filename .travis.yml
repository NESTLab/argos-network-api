language: cpp
jobs:
  include:
    #
    - os: linux
      name: Ubuntu 16.04
      dist: xenial
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
            - zlib1g-dev
            - libssl-dev
            - zip
            - lcov
            - cppcheck
      env:
        # Install g++-7 as the minimum requirement for dependency
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7 ; \
            update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60 \
                         --slave /usr/bin/g++ g++ /usr/bin/g++-7 ;  \
            update-alternatives --config gcc;"
        - PKG_BUILD="DEB"
        - PKG_EXT="deb"
    #
    - os: linux
      name: Ubuntu 18.04
      dist: bionic
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - zlib1g-dev
            - libssl-dev
            - zip
            - lcov
            - cppcheck
      env:
        - PKG_BUILD="DEB"
        - PKG_EXT="deb"
    #
    - os: osx
      name: Mac OSX
      osx_image: xcode10.1 # for CLANG 3.1
      env:
        - HOMEBREW_NO_AUTO_UPDATE=1
        - PKG_BUILD="ZIP"
        - PKG_EXT="pkg"
before_install:
  - eval "${MATRIX_EVAL}"
install:
  ######################## Install using brew on OSX #########################
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then 
      brew tap ilpincy/argos3                         ;
      travis_wait 60 brew install argos3              ;
      brew install openssl zlib libuv cppcheck lcov   ;
    fi

  ################### Download from Google drive for linux ###################
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then 
      wget --load-cookies /tmp/cookies.txt "https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id=1OVKPMZFa0GzSU1RwioaEReUCUl-vngkR' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')&id=1OVKPMZFa0GzSU1RwioaEReUCUl-vngkR" -O argos3_simulator-3.0.0-x86_64-beta56.deb && rm -rf /tmp/cookies.txt ;
       ;
      sudo dpkg -i argos3_simulator-3.0.0-x86_64-beta56.deb ;
      sudo apt install -f ;
    fi

######################### Build package for testing #########################
before_script:
  - ${CXX} --version
  - ${CXX} -v
  - mkdir -p build
  - cd build
  - cmake -DCMAKE_BUILD_TYPE=Debug ../src
  - cmake --build . --target all --parallel

  # Run coverage & test
  - cmake --build . --target coverage

  # Output coverage data for debugging (optional)
  - lcov --list coverage.info

  # Uploading to CodeCov
  # '-f' specifies file(s) to use and disables manual coverage gathering and file search which has already been done above
  - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
  
########################## Build package for deploy ##########################
script:
  - cd ..
  - rm -rf build
  - mkdir -p build
  - cd build
  - cmake -DCMAKE_BUILD_TYPE=Release ../src
  - cmake --build . --target all --parallel

############################### Bundle packages ##############################
after_script:
  # Get filename variable from CMake
  - EXPORT_PACKAGE_NAME=$(cat package_name.txt)

  # New filename if linux
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then 
      EXPORT_FILE_NAME=${EXPORT_PACKAGE_NAME}-$(lsb_release -is)_$(lsb_release -sr).${PKG_EXT};
    fi
  # New filename if OSX
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then 
      EXPORT_FILE_NAME=${EXPORT_PACKAGE_NAME}-OSX.${PKG_EXT};
    fi
  
  # Build package
  - cpack -G ${PKG_BUILD}
  
  ## For OSX, convert zip output to pkg
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then 
    pkgbuild --root "./_CPack_Packages/Darwin/ZIP/${EXPORT_PACKAGE_NAME}" --identifier "com.argos3.plugins.webviz" --install-location "/" --ownership recommended pkg_output.pkg ;
    
    productbuild --distribution ../src/packaging/darwin/distribution.xml --package-path "./_CPack_Packages/Darwin/ZIP/${EXPORT_PACKAGE_NAME}"  ${EXPORT_FILE_NAME} ;
    fi

  # For linux, rename files with ubuntu version
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then 
      mv ${EXPORT_PACKAGE_NAME}.${PKG_EXT} ${EXPORT_FILE_NAME};
    fi

  # Combine Client files into zip
  - cd .. && zip -r web_client.zip client

############################### Deploy packages ##############################
deploy:
  - provider: releases
    api_key: $GITHUB_OAUTH_ACCESS_TOKEN
    file:
      - "build/${EXPORT_FILE_NAME}"
      - web_client.zip
      - README.md
      - LICENSE
    skip_cleanup: true
    prerelease: true
    overwrite: true
    draft: true
  